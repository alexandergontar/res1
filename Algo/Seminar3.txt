public class LinkedList {
    Node head;

    public class Node {
        int value;
        Node next;
    }
    
    public void addFirst(int value){
        Node newNode = new Node();
        
        newNode.value = value;
        
        if(head == null) {
            head = newNode;
        } else {
            newNode.next = head;
        }
        
    }
    
    public void remove(){
        if(head != null)
            head = head.next;
    }


}
====================================================
/**
     * @apiNote проверка, есть ли элемент
     * @param value предаваемое значение
     * @return
     */
    public boolean contains(int value) {
        Node currentNode = head;
        while (currentNode != null) {
            if (currentNode.value == value) {
                return true;
            }
            currentNode = currentNode.next;
        }
        return false;
    }

    public void addLast(int value) {
        Node node = new Node();
        node.value = value;
        if (head == null){
            head = node;
        } else {
            Node currentNode = head;
            while (currentNode != null) {
                if (currentNode.next == null) {
                    currentNode.next = node;
                }
                currentNode = currentNode.next;
            }
        }
    }

    public void removeLast() {
        if (head != null) {
            Node currentNode = head;
            while (currentNode.next != null) {
                if (currentNode.next.next == null){
                    currentNode.next = null;
                }
                currentNode = currentNode.next;
            }
        }
    }
}
=============================================================
public void printList() {
        Node currentNode = head;
        while (currentNode != null) {
            System.out.print(currentNode.value + " ");
            currentNode = currentNode.next;
        }
        System.out.println();
    }

    public void addFirst(int value) {
        Node node = new Node();
        node.value = value;

        if (head == null) {
            head = node;
        } else {
            node.next = head;
            head = node;
        }
    }
======================================================
public class LinkedList {
    Node head;

    public class Node {
        int value;
        Node next;

        @Override
        public String toString() {
            return "Node{" +
                    "value=" + value +
                    ", next=" + next +
                    '}';
        }
    }

    public void printList() {
        Node currentNode = head;
        while (currentNode != null) {
            System.out.print(currentNode.value + " ");
            currentNode = currentNode.next;
        }
        System.out.println();
    }

    public void addFirst(int value) {
        Node node = new Node();
        node.value = value;

        if (head == null) {
            head = node;
        } else {
            node.next = head;
            head = node;
        }
    }

    public void remove() {
        if (head != null) {
            head = head.next;
        }
    }

    /**
     * @param value предаваемое значение
     * @return
     * @apiNote проверка, есть ли элемент
     */
    public boolean contains(int value) {
        Node currentNode = head;
        while (currentNode != null) {
            if (currentNode.value == value) {
                return true;
            }
            currentNode = currentNode.next;
        }
        return false;
    }

    public void addLast(int value) {
        Node node = new Node();
        node.value = value;
        if (head == null) {
            head = node;
        } else {
            Node currentNode = head;
            while (currentNode.next != null) {
                currentNode = currentNode.next;
            }
            currentNode.next = node;
        }
    }

    public void removeLast() {
        if (head != null) {
            Node currentNode = head;
            while (currentNode.next != null) {
                if (currentNode.next.next == null) {
                    currentNode.next = null;
                }
                currentNode = currentNode.next;
            }
        }
    }
}
=================================================================
public class Main {
    public static void main(String[] args) {
        LinkedList linkedList = new LinkedList();
        linkedList.addFirst(1);
        linkedList.addFirst(20);
        linkedList.addFirst(11);
        linkedList.addFirst(34);
        linkedList.printList();

        linkedList.addLast(55);
        linkedList.addLast(31);
        linkedList.addLast(39);
        linkedList.printList();

        System.out.println("linkedList.contains(55) = " + linkedList.contains(55));
        System.out.println("linkedList.contains(156) = " + linkedList.contains(156));

        linkedList.removeLast();
        linkedList.printList();
        linkedList.remove();
        linkedList.printList();

    }
}
======================================================================
public class LinkedList {
    Node head;

    public class Node {
        int value;
        Node next;

        @Override
        public String toString() {
            return "Node{" +
                    "value=" + value +
                    ", next=" + next +
                    '}';
        }
    }

    public void printList() {
        Node currentNode = head;
        while (currentNode != null) {
            System.out.print(currentNode.value + " ");
            currentNode = currentNode.next;
        }
        System.out.println();
    }

    public void addFirst(int value) {
        Node node = new Node();
        node.value = value;

        if (head == null) {
            head = node;
        } else {
            node.next = head;
            head = node;
        }
    }

    public void remove() {
        if (head != null) {
            head = head.next;
        }
    }

    /**
     * @param value предаваемое значение
     * @return
     * @apiNote проверка, есть ли элемент
     */
    public boolean contains(int value) {
        Node currentNode = head;
        while (currentNode != null) {
            if (currentNode.value == value) {
                return true;
            }
            currentNode = currentNode.next;
        }
        return false;
    }

    public void addLast(int value) {
        Node node = new Node();
        node.value = value;
        if (head == null) {
            head = node;
        } else {
            Node currentNode = head;
            while (currentNode.next != null) {
                currentNode = currentNode.next;
            }
            currentNode.next = node;
        }
    }

    public void removeLast() {
        if (head != null) {
            Node currentNode = head;
            if (currentNode.next == null) {
                head = null;
            }
            while (currentNode.next != null) {
                if (currentNode.next.next == null) {
                    currentNode.next = null;
                    return;
                }
                currentNode = currentNode.next;
            }
        }
    }
}
==================================================================
public class DoubleList {
    Node head;
    Node tail;

    public class Node {
        int value;
        Node next;
        Node previous;

        @Override
        public String toString() {
            return "Node{" +
                    "value=" + value +
                    ", next=" + next +
                    '}';
        }
    }

    public void printList() {
        Node currentNode = head;
        while (currentNode != null) {
            System.out.print(currentNode.value + " ");
            currentNode = currentNode.next;
        }
        System.out.println();
    }

    public void addFirst(int value) {
        Node node = new Node();
        node.value = value;

        if (head == null) {
            head = node;
            tail = node;
        } else {
            head.previous = node;
            node.next = head;
            head = node;
        }
    }

    public void remove() {
        if (head != null && head.next != null) {
            head = head.next;
            head.previous = null;
        } else {
            head = null;
            tail = null;
        }
    }

    /**
     * @param value предаваемое значение
     * @return
     * @apiNote проверка, есть ли элемент
     */
    public boolean contains(int value) {
        Node currentNode = head;
        while (currentNode != null) {
            if (currentNode.value == value) {
                return true;
            }
            currentNode = currentNode.next;
        }
        return false;
    }

    public void addLast(int value) {
        Node node = new Node();
        node.value = value;
        if (tail != null) {
            tail.next = node;
            node.previous = tail;
            tail = node;
        } else {
            tail = node;
            head = node;
        }
    }

    public void removeLast() {
        if (tail != null && tail.previous != null) {
            tail.previous.next = null;
            tail = tail.previous;
        } else {
            head = null;
            tail = null;
        }
    }
}
===========================================================
public class Main {
    public static void main(String[] args) {
//        LinkedList linkedList = new LinkedList();
//        linkedList.addFirst(1);
//        linkedList.addFirst(20);
//        linkedList.addFirst(11);
//        linkedList.addFirst(34);
//        linkedList.printList();
//
//        linkedList.addLast(55);
//        linkedList.addLast(31);
//        linkedList.addLast(39);
//        linkedList.printList();
//
//        System.out.println("linkedList.contains(55) = " + linkedList.contains(55));
//        System.out.println("linkedList.contains(156) = " + linkedList.contains(156));
//
//        linkedList.removeLast();
//        linkedList.printList();
//        linkedList.remove();
//        linkedList.printList();

        DoubleList doubleList = new DoubleList();
        doubleList.addFirst(1);
//        doubleList.addFirst(2);
//        doubleList.addFirst(12);
//        doubleList.addFirst(321);
        doubleList.printList();
        //doubleList.remove();
//        doubleList.printList();
        doubleList.addLast(3);
//        doubleList.addLast(23);
//        doubleList.addLast(54);
        doubleList.printList();
        doubleList.removeLast();
        doubleList.printList();

    }
}
=============================================================
https://leetcode.com/problems/reverse-linked-list/

Всем привет, вот задание на домашнее закрепление:
- Необходимо реализовать метод разворота связного списка (двухсвязного или односвязного на выбор).
- (Необязательное)* попробуйте вывести n-е число с конца односвязного списка, предварительно не узнавая его размер : )